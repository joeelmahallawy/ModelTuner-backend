{"version":3,"file":"server.js","sourceRoot":"/","sources":["server.ts"],"names":[],"mappings":";;;AAAA,uFAAkD;AAClD,yBAAuB;AACvB,0DAA0B;AAC1B,iEAAiC;AACjC,4DAA4B;AAC5B,8DAA8B;AAC9B,8DAA8B;AAC9B,+DAAsC;AAGtC,MAAM,MAAM,GAAG,IAAA,iBAAO,EAAC;IACrB,MAAM,EAAE,IAAI;CACb,CAAC,CAAC;AAEH,MAAM,CAAC,QAAQ,CAAC,yBAAU,CAAC,CAAC;AAE5B,MAAM,CAAC,QAAQ,CAAC,cAAI,EAAE;IAGpB,cAAc,EAAE,kBAAkB;CACnC,CAAC,CAAC;AAEH,MAAM,qBAAqB,GAAQ;IACjC,kBAAkB,EAAE,IAAI;CACzB,CAAC;AAGF,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;;IAE/C,IAAI,qBAAqB,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC;QAAE,OAAO;IAExD,MAAM,GAAG,GAAG,MAAA,MAAA,GAAG,CAAC,OAAO,0CAAE,aAAa,0CAAE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;IAG/D,IAAI,CAAC,GAAG;QAAE,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAErE,MAAM,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,GAAa,CAAC,CAAQ,CAAC;IAClE,MAAM,IAAI,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QACvC,KAAK,EAAE,EAAE,KAAK,EAAE;KACjB,CAAC,CAAC;IAGH,IAAI,IAAI,EAAE;QAER,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;KACtC;AACH,CAAC,CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,QAAQ,CAAC,aAAU,EAAE;IAC1B,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAoB;IACxC,IAAI,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE;CAC3B,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,SAAe,OAAO,CAAC,OAAO,EAAE,KAAK;;QACnD,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAC5B,CAAC;CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAE1C,MAAM,IAAI,GAAG,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAE5C,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IACnD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAc,CAAC,CAAC;IAGhE,IAAI,IAAI,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;IAC7D,MAAM,eAAe,GAAG,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;IAGvC,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;KACrE;IAED,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC;QAC1B,KAAK,EAAE,IAAI,CAAC,KAAK;KAClB,CAAC,CAAC;IAEH,OAAO,EAAE,GAAG,EAAE,eAAe,EAAE,CAAC;AAClC,CAAC,CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAE5C,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,mBAAmB,GAAG,MAAM,eAAK,CAAC,GAAG,CACzC,iCAAiC,EACjC;QACE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,EAAE,EAAE;KAC3D,CACF,CAAC;IACF,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;IAE7D,OAAO,EAAE,KAAK,EAAE,gBAAgB,EAAE,CAAC;AACrC,CAAC,CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IACtD,IAAI;QACF,MAAM,EACJ,YAAY,EACZ,WAAW,GACZ,GAAkD,IAAI,CAAC,KAAK,CAC3D,GAAG,CAAC,IAAc,CACnB,CAAC;QAEF,IAAI,QAAQ,GAAG,IAAI,IAAI,CAAC,CAAC,YAAY,CAAC,EAAE;YACtC,IAAI,EAAE,0BAA0B;SACjC,CAAC,CAAC;QAEH,IAAI,IAAI,GAAG,IAAI,QAAQ,EAAE,CAAC;QAE1B,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAGpC,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAClC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;SAC5C;aAAM;YACL,IAAI,CAAC,MAAM,CACT,MAAM,EACN,QAAQ,EACR,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,CAC5C,CAAC;SACH;QAWD,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;QAInE,MAAM,SAAS,GAAG,IAAI,gBAAM,CAAC,EAAE,MAAM,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAsB,EAAE,CAAC,CAAC;QAEvE,MAAM,MAAM,GAAG,MAAM,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC;YAE1C,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;YAEtB,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC;SAC7B,CAAC,CAAC;QAUH,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,KAAK,EAAE;QACd,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QAE9C,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KACzD;AACH,CAAC,CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,MAAM,CAAC,aAAa,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAEhD,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAGzB,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,UAAU,GAAG,MAAM,eAAK,CAAC,MAAM,CACnC,mCAAmC,EAAE,EAAE,EACvC;QACE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,EAAE,EAAE;KAC3D,CACF,CAAC;IAEF,MAAM,kBAAkB,GAAG,UAAU,CAAC,IAAI,CAAC;IAE3C,OAAO,kBAAkB,CAAC;AAC5B,CAAC,CAAA,CAAC,CAAC;AAGH,MAAM,CAAC,GAAG,CAAC,aAAa,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAE7C,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,UAAU,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,kCAAkC,EAAE;QACrE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,EAAE,EAAE;KAC3D,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;IAEpC,OAAO,EAAE,MAAM,EAAE,CAAC;AACpB,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAC9C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAc,CAAC,CAAC;IAGlD,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,YAAY,GAAG,MAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,CAAC;QAC5C,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;QAC5B,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;KAC/B,CAAC,CAAC;IAEH,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,UAAU,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAE1C,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,EAAE,EAAE,EAAE,GAAQ,GAAG,CAAC,KAAK,CAAC;IAC9B,MAAM,MAAM,GAAG,EAAY,CAAC;IAC5B,MAAM,IAAI,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,mCAAmC,MAAM,EAAE,EAAE;QACxE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,EAAE,EAAE;KAC3D,CAAC,CAAC;IAEH,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;AAC7B,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAClD,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAc,CAAC,CAAC;IAC5D,IAAI;QAEF,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;QAEnE,MAAM,SAAS,GAAG,IAAI,gBAAM,CAAC,EAAE,MAAM,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAsB,EAAE,CAAC,CAAC;QAGvE,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;YACtD,KAAK,EAAE,eAAe;YACtB,aAAa,EAAE,MAAM;YAErB,eAAe,EAAE,EAAE,QAAQ,EAAE,QAAQ,IAAI,CAAC,EAAE;SAC7C,CAAC,CAAC;QAEH,MAAM,OAAO,GAAG,QAAQ,CAAC;QAEzB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QAClC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC;KACzB;IAAC,OAAO,GAAG,EAAE;QAEZ,OAAO,KAAK,CAAC,MAAM,CAAC,CAAA,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,KAAI,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KACnD;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,eAAe,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAE/C,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,OAAO,GAAG,MAAM,eAAK,CAAC,GAAG,CAC7B,4CAA4C,EAC5C,EAAE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,EAAE,EAAE,EAAE,CAC/D,CAAC;IAEF,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;IAE1B,OAAO,EAAE,IAAI,EAAE,CAAC;AAClB,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAEjD,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAGzB,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,cAAc,GAAG,MAAM,eAAK,CAAC,GAAG,CACpC,mCAAmC,EAAE,UAAU,EAC/C,EAAE,OAAO,EAAE,EAAE,aAAa,EAAE,UAAU,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,EAAE,EAAE,EAAE,CAC/D,CAAC;IAEF,MAAM,WAAW,GAAG,cAAc,CAAC,IAAI,CAAC;IAExC,OAAO,EAAE,WAAW,EAAE,CAAC;AACzB,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,cAAc,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAEjD,MAAM,EAAE,EAAE,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAGzB,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,SAAS,GAAG,IAAI,gBAAM,CAAC,EAAE,MAAM,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAsB,EAAE,CAAC,CAAC;IAEvE,MAAM,KAAK,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAE7C,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAO,GAAG,EAAE,KAAK,EAAE,EAAE;IAE9C,MAAM,IAAI,GAAS,GAAG,CAAC,cAAc,CAAC,GAAG,CAAC,MAAe,CAAS,CAAC;IAEnE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAc,CAAC,CAAC;IAElD,MAAM,SAAS,GAAG,IAAI,gBAAM,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAG/C,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;QACnB,MAAM,gBAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvB,IAAI,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE;YAC9B,KAAK,EAAE,EAAE,KAAK,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,EAAE;SAC9B,CAAC,CAAC;KACJ;IAED,OAAO,QAAQ,CAAC;AAGlB,CAAC,CAAA,CAAC,CAAC;AAIH,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC","sourcesContent":["import reqContext from \"@fastify/request-context\";\nimport \"dotenv/config\";\nimport axios from \"axios\";\nimport cors from \"@fastify/cors\";\nimport OpenAI from \"openai\";\nimport Fastify from \"fastify\";\nimport prisma from \"./prisma\";\nimport fastifyJwt from \"@fastify/jwt\";\nimport { User } from \"./interfaces\";\n\nconst server = Fastify({\n  logger: true,\n});\n\nserver.register(reqContext);\n\nserver.register(cors, {\n  // allowedHeaders: \"*\",\n  // TODO: CHANGE IN PRODUCTION TO PUBLIC WEBSITE URL\n  allowedHeaders: \"modeltunerai.com\",\n});\n\nconst UNAUTHENTICATED_PATHS: any = {\n  \"/loginWithGoogle\": true,\n};\n// to CHECK AUTH and send away if not\n\nserver.addHook(\"onRequest\", async (req, reply) => {\n  // path doesn't require authenticated so continue\n  if (UNAUTHENTICATED_PATHS[req.routeOptions.url]) return;\n\n  const jwt = req.headers?.authorization?.replace(\"Bearer \", \"\");\n\n  // user didn't pass in auth header\n  if (!jwt) reply.status(401).send({ error: `Unauthenticated user.` });\n\n  const { email } = (await server.jwt.decode(jwt as string)) as any;\n  const user = await prisma.user.findFirst({\n    where: { email },\n  });\n\n  // set user on context\n  if (user) {\n    // @ts-expect-error\n    req.requestContext.set(\"user\", user);\n  }\n});\n\n// for signing JWT tokens in auth\nserver.register(fastifyJwt, {\n  secret: process.env.JWT_SECRET as string,\n  sign: { expiresIn: \"24h\" },\n});\n\nserver.get(\"/\", async function handler(request, reply) {\n  return { hello: \"world\" };\n});\n\n// ROUTE: to get a user's current session data\nserver.get(`/session`, async (req, reply) => {\n  // @ts-expect-error\n  const user = req.requestContext.get(\"user\");\n\n  return { user };\n});\n\n// ROUTE: will either create user, or log into user and send back JWT\nserver.post(`/loginWithGoogle`, async (req, reply) => {\n  const { name, email, picture } = JSON.parse(req.body as string);\n\n  // user already exists\n  let user = await prisma.user.findFirst({ where: { email } });\n  const firstTimeSignIn = Boolean(!user);\n\n  // user isn't registered\n  if (!user) {\n    user = await prisma.user.create({ data: { email, name, picture } });\n  }\n\n  const jwt = server.jwt.sign({\n    email: user.email,\n  });\n\n  return { jwt, firstTimeSignIn };\n});\n\n// ROUTE: returns list of files uploaded given an API key\nserver.get(`/listFiles`, async (req, reply) => {\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const getAllFilesUploaded = await axios.get(\n    `https://api.openai.com/v1/files`,\n    {\n      headers: { Authorization: `Bearer ${user?.openAiApiKey}` },\n    }\n  );\n  const allFilesUploaded = await getAllFilesUploaded.data.data;\n\n  return { files: allFilesUploaded };\n});\n\n// ROUTE: uploading files to OpenAI\nserver.post(`/uploadFileToOpenAI`, async (req, reply) => {\n  try {\n    const {\n      trainingData,\n      datasetName,\n    }: { trainingData: string; datasetName: string } = JSON.parse(\n      req.body as string\n    );\n\n    let fileblob = new Blob([trainingData], {\n      type: \"text/plain; charset=utf8\",\n    });\n\n    let body = new FormData();\n\n    body.append(\"purpose\", \"fine-tune\");\n\n    // is custom training data (so it will already have .jsonl extension)\n    if (datasetName.includes(\".jsonl\")) {\n      body.append(\"file\", fileblob, datasetName);\n    } else {\n      body.append(\n        \"file\",\n        fileblob,\n        `${datasetName.replace(\".json\", \"\")}.jsonl`\n      );\n    }\n\n    // TODO: if we want to write to project and see the training data in action\n    // fs.writeFile(\n    //   `${datasetName}.jsonl`,\n\n    //   trainingData,\n    //   (err) => console.log(err)\n    // );\n\n    // @ts-expect-error\n    const user: User = req.requestContext.get(\"user\" as never) as User;\n\n    // create openai instance when uploading so we can get proper error message\n\n    const openaiApi = new OpenAI({ apiKey: user?.openAiApiKey as string });\n\n    const upload = await openaiApi.files.create({\n      // @ts-expect-error\n      file: body.get(\"file\"),\n      // @ts-expect-error\n      purpose: body.get(\"purpose\"),\n    });\n\n    // WITH HTTP API\n    // const upload = await axios.post(\"https://api.openai.com/v1/files\", body, {\n    //   headers: {\n    //     Authorization: `Bearer ${user?.openAiApiKey}`,\n    //     \"Content-Type\": \"text/plain\",\n    //   },\n    // });\n\n    return upload;\n  } catch (error) {\n    console.error(\"Error on upload file:\", error);\n    // @ts-ignore\n    return reply.status(500).send({ error: error.message });\n  }\n});\n\n// ROUTE:\nserver.delete(`/deleteFile`, async (req, reply) => {\n  //@ts-expect-error\n  const { id } = req.query;\n\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const deleteFile = await axios.delete(\n    `https://api.openai.com/v1/files/${id}`,\n    {\n      headers: { Authorization: `Bearer ${user?.openAiApiKey}` },\n    }\n  );\n\n  const deleteFileResponse = deleteFile.data;\n\n  return deleteFileResponse;\n});\n\n// ROUTE:\nserver.get(`/listModels`, async (req, reply) => {\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const listModels = await axios.get(`https://api.openai.com/v1/models`, {\n    headers: { Authorization: `Bearer ${user?.openAiApiKey}` },\n  });\n\n  const models = listModels.data.data;\n\n  return { models };\n});\n\nserver.post(`/saveApiKey`, async (req, reply) => {\n  const { apiKey } = JSON.parse(req.body as string);\n\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const updateApiKey = await prisma.user.update({\n    where: { email: user.email },\n    data: { openAiApiKey: apiKey },\n  });\n\n  return { success: true };\n});\n\nserver.get(`/getFile`, async (req, reply) => {\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const { id }: any = req.query;\n  const fileID = id as string;\n  const file = await axios.get(`https://api.openai.com/v1/files/${fileID}`, {\n    headers: { Authorization: `Bearer ${user?.openAiApiKey}` },\n  });\n\n  return { file: file.data };\n});\n\nserver.post(`/createFinetune`, async (req, reply) => {\n  const { fileId, n_epochs } = JSON.parse(req.body as string);\n  try {\n    // @ts-expect-error\n    const user: User = req.requestContext.get(\"user\" as never) as User;\n\n    const openaiApi = new OpenAI({ apiKey: user?.openAiApiKey as string });\n\n    // start creating finetune job\n    const startJob = await openaiApi.fineTuning.jobs.create({\n      model: \"gpt-3.5-turbo\",\n      training_file: fileId,\n      // default to 3 if it wasn't passed in\n      hyperparameters: { n_epochs: n_epochs || 3 },\n    });\n\n    const jobData = startJob;\n\n    console.log(`JOB DATA:`, jobData);\n    return { job: jobData };\n  } catch (err) {\n    // @ts-expect-error\n    return reply.status(err?.status || 400).send(err);\n  }\n});\n\nserver.get(`/finetuneJobs`, async (req, reply) => {\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const getJobs = await axios.get(\n    `https://api.openai.com/v1/fine_tuning/jobs`,\n    { headers: { Authorization: `Bearer ${user?.openAiApiKey}` } }\n  );\n\n  const jobs = getJobs.data;\n\n  return { jobs };\n});\n\nserver.get(`/getFileContent`, async (req, reply) => {\n  // @ts-expect-error\n  const { id } = req.query;\n\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const getFileContent = await axios.get(\n    `https://api.openai.com/v1/files/${id}/content`,\n    { headers: { Authorization: `Bearer ${user?.openAiApiKey}` } }\n  );\n\n  const fileContent = getFileContent.data;\n\n  return { fileContent };\n});\n\nserver.delete(`/deleteModel`, async (req, reply) => {\n  // @ts-expect-error\n  const { id } = req.query;\n\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const openaiApi = new OpenAI({ apiKey: user?.openAiApiKey as string });\n\n  const model = await openaiApi.models.del(id);\n\n  return model;\n});\n\nserver.post(`/testApiKey`, async (req, reply) => {\n  // @ts-expect-error\n  const user: User = req.requestContext.get(\"user\" as never) as User;\n\n  const { apiKey } = JSON.parse(req.body as string);\n\n  const openaiApi = new OpenAI({ apiKey });\n\n  const response = await openaiApi.models.list();\n\n  // @ts-expect-error\n  if (!response.error) {\n    await prisma.user.update({\n      data: { openAiApiKey: apiKey },\n      where: { email: user?.email },\n    });\n  }\n\n  return response;\n\n  //\n});\n\n// Run the server!\n// @ts-expect-error\nserver.listen({ port: process.env.PORT || 4000, host: \"0.0.0.0\" });\n"]}